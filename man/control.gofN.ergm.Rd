% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gofN.R
\name{control.gofN.ergm}
\alias{control.gofN.ergm}
\alias{control.gofN}
\title{Auxiliary for Controlling Multinetwork ERGM Linear Goodness-of-Fit Evaluation}
\usage{
control.gofN.ergm(
  nsim = 100,
  obs.twostage = nsim/2,
  retry_bad_nets = 0,
  save_stats = FALSE,
  MCMC.burnin = NULL,
  MCMC.interval = NULL,
  MCMC.prop.weights = NULL,
  MCMC.prop.args = NULL,
  MCMC.init.maxedges = NULL,
  MCMC.packagenames = NULL,
  MCMC.runtime.traceplot = FALSE,
  network.output = "network",
  seed = NULL,
  parallel = 0,
  parallel.type = NULL,
  parallel.version.check = TRUE,
  parallel.inherit.MT = FALSE
)

control.gofN(
  nsim = 100,
  obs.twostage = nsim/2,
  retry_bad_nets = 0,
  save_stats = FALSE,
  MCMC.burnin = NULL,
  MCMC.interval = NULL,
  MCMC.prop.weights = NULL,
  MCMC.prop.args = NULL,
  MCMC.init.maxedges = NULL,
  MCMC.packagenames = NULL,
  MCMC.runtime.traceplot = FALSE,
  network.output = "network",
  seed = NULL,
  parallel = 0,
  parallel.type = NULL,
  parallel.version.check = TRUE,
  parallel.inherit.MT = FALSE
)
}
\arguments{
\item{nsim}{Number of networks to be randomly drawn using Markov chain Monte
Carlo.  This sample of networks provides the basis for comparing the model
to the observed network.}

\item{obs.twostage}{Either \code{FALSE} or an integer. This parameter
only has an effect if the network has missing data or
observational process. For such networks, evaluating the Pearson
residual requires simulating the expected value of the
conditional variance under the observation process. If \code{FALSE},
the simulation is performed conditional on the observed
network. However, a more accurate estimate can be obtained via a
two-stage process: \enumerate{

\item Sample networks from the model without the observational
constraint.

\item Conditional on each of those networks, sample with the
observational constraint, estimating the variance within each
sample and then averaging over the first-stage sample.

}

Then, \code{obs.twostage} specifies the number of unconstrained networks
to simulate from, which should divide the \code{\link[=control.gofN.ergm]{control.gofN.ergm()}}'s
\code{nsim} argument evenly.}

\item{retry_bad_nets}{This parameter only has an effect if the
network has missing data or observational process. It gives the
number of times to retry simulating networks for which the
estimated constrained variance is higher than unconstrained. Note
that setting it \verb{>0} is likely to bias estimates: the simulation
should instead be rerun with a larger \code{nsim}.}

\item{save_stats}{If \code{TRUE}, save the simulated network statistics;
defaults to \code{FALSE} to save memory and disk space.}

\item{MCMC.burnin}{Number of proposals before any MCMC sampling is done. It
typically is set to a fairly large number.}

\item{MCMC.interval}{Number of proposals between sampled statistics.}

\item{MCMC.prop.weights}{Specifies the proposal distribution used in the
MCMC Metropolis-Hastings algorithm.  Possible choices are \code{"TNT"} or
\code{"random"}; the \code{"default"} is one of these two, depending on the
constraints in place (as defined by the \code{constraints} argument of the
\code{\link{ergm}} function), though not all weights may be used with all
constraints.  The \code{TNT} (tie / no tie) option puts roughly equal weight
on selecting a dyad with or without a tie as a candidate for toggling,
whereas the \code{random} option puts equal weight on all possible dyads,
though the interpretation of \code{random} may change according to the
constraints in place.  When no constraints are in place, the default is TNT,
which appears to improve Markov chain mixing particularly for networks with
a low edge density, as is typical of many realistic social networks.}

\item{MCMC.prop.args}{An alternative, direct way of specifying additional
arguments to proposal.}

\item{MCMC.init.maxedges}{Maximum number of edges expected in network.}

\item{MCMC.packagenames}{Names of packages in which to look for change
statistic functions in addition to those autodetected. This argument should
not be needed outside of very strange setups.}

\item{MCMC.runtime.traceplot}{Logical: If TRUE, plot traceplots of the MCMC
sample after every MCMC MLE iteration.}

\item{network.output}{R class with which to output networks. The options are
"network" (default) and "edgelist.compressed" (which saves space but only
supports networks without vertex attributes)}

\item{seed}{Seed value (integer) for the random number generator.  See
\code{\link[base]{set.seed}}.}

\item{parallel}{Number of threads in which to run the sampling. Defaults to
0 (no parallelism). See the entry on \link[=ergm-parallel]{parallel processing}
for details and troubleshooting.}

\item{parallel.type}{API to use for parallel processing. Supported values
are \code{"MPI"} and \code{"PSOCK"}. Defaults to using the \code{parallel}
package with PSOCK clusters. See \code{\link{ergm-parallel}}}

\item{parallel.version.check}{Logical: If TRUE, check that the version of
\code{\link[=ergm-package]{ergm}} running on the slave nodes is the same as
that running on the master node.}

\item{parallel.inherit.MT}{Logical: If TRUE, slave nodes and
processes inherit the \code{\link[=set.MT_terms]{set.MT_terms()}} setting.}
}
\description{
\code{control.gofN.ergm} (or its alias, \code{control.gofN}) is
intended to be used with \code{\link[=gofN]{gofN()}} specifically and will "inherit"
as many control parameters from \code{\link{ergm}} fit as possible().
}
\details{
Auxiliary function as user interface for fine-tuning ERGM Goodness-of-Fit
Evaluation.
}
