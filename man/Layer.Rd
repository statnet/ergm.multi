% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/InitErgmTerm.multilayer.R
\name{Layer}
\alias{Layer}
\title{A multilayer network representation.}
\usage{
Layer(..., .symmetric = NULL, .bipartite = NULL, .active = NULL)
}
\arguments{
\item{...}{layer specification, in one of three formats:
\enumerate{
\item An (optionally named) list of identically-dimensioned
networks.
\item Several networks as (optionally named) arguments.
\item A single network, a character vector, and several optional
arguments. Then, the layers are values of the named edge
attributes. The optional arguments \code{.symmetric} and
\code{.bipartite} are then interpreted as described below.
}}

\item{.symmetric}{If the layer specification is via a single
network with edge attributes and the network is directed, an
optional logical vector to specify which of the layers should be
treated as undirected.}

\item{.bipartite}{If the layer specification is via a single
network with edge attributes and the network is unipartite, an
optional integer vector to specify which of the layers should be
treated as bipartite and how many \code{b1} vertices there are.}

\item{.active}{A \link[=node-attr]{nodal attribute specification}
specifying which nodes on each network \emph{may} have ties, or a list
with an element for each network. The list will be recycled up to
the number of layers.}
}
\value{
A network object with layer metadata.
}
\description{
A function for specifying the LHS of a multilayer (a.k.a. multiplex
a.k.a. multirelational a.k.a. multivariate) ERGM.
}
\note{
The resulting network will be the "least common denominator"
network: if not all layers have the same bipartedness, all layers
will appear as unipartite to the statistics, and if any are
directed, all will be. However, \link[=ergm:ergm-terms]{certain operator terms}, particularly \code{Undir()} and \code{S()}, can be
used to construct a bipartite subgraph of a unipartite graph or
change directedness.
}
\examples{

data(florentine)

# Method 1: list of networks
flo <- Layer(list(m = flomarriage, b = flobusiness))
ergm(flo ~ L(~edges, ~m)+L(~edges, ~b))

# Method 2: networks as arguments
flo <- Layer(m = flomarriage, b = flobusiness)
ergm(flo ~ L(~edges, ~m)+L(~edges, ~b))

# Method 3: edge attributes:
flo <- flomarriage | flobusiness
flo[,, names.eval="m"] <- as.matrix(flomarriage)
flo[,, names.eval="b"] <- as.matrix(flobusiness)
flo <- Layer(flo, c("m","b"))
ergm(flo ~ L(~edges, ~m)+L(~edges, ~b))

### Specifying modes and mixed bipartitedness

# Suppose we have a two-mode network with 5 nodes on Mode 1 and 15
# on Mode 2, and suppose that we observe two layers, one only among
# actors of Mode 1 and the other bipartite between Modes 1 and 2.

# Construct the two layers' networks:
nw1 <- network.initialize(20, dir=FALSE)
nw12 <- network.initialize(20, dir=FALSE, bipartite=5)
nw1 \%v\% "mode" <- rep(1:2,c(5,15))

# For testing: the maximal set of edges for each type of network:
nw1[1:5,1:5] <- 1
nw12[1:5,6:20] <- 1

# The .active argument specifies the following:
# * nw1's vertices are only active if their mode=1 (i.e., 1-2, 2-1,
#   and 2-2 can't have edges).
# * nw12's vertices are all active, but the network is bipartite,
#   so constraints will be adjusted automatically.
lnw <- Layer(nw1, nw12, .active=list(~mode==1, ~TRUE))

summary(lnw~
edges+ # 5*4/2+5*15 = 10+75 = 85
L(~edges,~`1`)+ # 5*4/2 = 10
L(~edges,~`2`)+ # 5*15 = 75
L(~edges,~(`1`|`2`))+ # This logical layer has contents of both, so also 85.
L(~edges,~(`1`&`2`)) # There is no overlap between the two layers, so 0.
)

# Layer-aware terms can be used:

nw1[,] <-0
nw1[1,2:3] <- 1
nw1[2,3] <- 1
nw12[,] <- 0
nw12[1,6:7] <- 1
nw12[2,6:7] <- 1

lnw <- Layer(nw1, nw12, .active=list(~mode==1,~TRUE))

summary(lnw~L(~triangles, ~`1`)+ # 1-2-3 triangle.
  L(~triangles, ~`1`|`2`)+ # 1-2-3, 1-2-6, 1-2-7 triangles
  dgwespL(L.base=~`1`, Ls.path=list(~`2`,~`2`)) # 1-2-6 and 1-2-7 only
)

# Because the layers are represented as a block-diagonal matrix,
# this will only count triangles entirely contained within a single
# layer, i.e., 1-2-3:
summary(lnw~triangles)

# If you need to evaluate bipartite-only statistics on the second
# layer, you need to use the S() operator to select the bipartite
# view:
summary(lnw~L(~S(~b1degree(1:3)+b2degree(1:3),1:5~6:20), ~`2`))

}
\seealso{
\link[=ergm-terms]{Help on model specification} for specific terms.
}
